{"version":3,"sources":["components/SearchBar.tsx","components/EmojiList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchBar","search","setSearch","className","value","onChange","e","target","autoComplete","type","name","placeholder","EmojiList","handleScroll","emojisToShow","onScroll","map","emoji","title","symbol","App","useState","emojis","setEmojis","setEmojisToShow","filteredEmojis","setFilteredEmojis","useEffect","axios","get","then","response","data","spliced","splice","filtered","filter","match","keywords","split","find","element","includes","length","undefined","scrollHeight","scrollTop","clientHeight","moreEmojis","concat","showMoreEmojis","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRA0BeA,EAnB6B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACrD,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,IACA,uBACEC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAUI,EAAEC,OAAOH,QACpCD,UAAU,cACVK,aAAa,MACbC,KAAK,OACLC,KAAK,SACLC,YAAY,8CCIPC,EAhB6B,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC3D,OACE,yBAASX,UAAU,gBAAgBY,SAAUF,EAA7C,SACA,qBAAKV,UAAU,MAAf,SACCW,GAAgBA,EAAaE,KAAI,SAACC,GAC7B,OACE,qBAAKC,MAAOD,EAAMC,MAAyBf,UAAU,gCAArD,SACGc,EAAME,QADqBF,EAAMC,eCqEjCE,MA3Ef,WACE,MAA4BC,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCF,qBAAxC,mBAAOP,EAAP,KAAqBU,EAArB,KACA,EAA4CH,qBAA5C,mBAAOI,EAAP,KAAuBC,EAAvB,KACA,EAA4BL,mBAAS,IAArC,mBAAOpB,EAAP,KAAeC,EAAf,KA0DA,OAxDAyB,qBAAU,WACRC,IACGC,IADH,gFAIGC,MAAK,SAACC,GACLR,EAAUQ,EAASC,WAEtB,IAEHL,qBAAU,WACR,GAAGF,EAAgB,CACjB,IAAIQ,EAAU,YAAIR,GAAgBS,OAAO,EAAE,IAC3CV,EAAgBS,QACX,GAAGX,EAAQ,CAChB,IAAIW,EAAU,YAAIX,GAAQY,OAAO,EAAE,IACnCV,EAAgBS,MAEjB,CAACX,EAAQG,IAEZE,qBAAU,WACR,GAAG1B,EAAQ,CACT,IAAIkC,EAAQ,OAAGb,QAAH,IAAGA,OAAH,EAAGA,EAAQc,QAAO,SAACnB,GAC7B,IACIoB,EADWpB,EAAMqB,SAASC,MAAM,KACfC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,SAASzC,MACtD,OAAOoC,GAASA,EAAMM,OAAS,KAEjCjB,EAAkBS,QAElBT,OAAkBkB,KAGnB,CAAC3C,IAyBF,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,gBAAlB,SACE,gDAEF,0BAASA,UAAU,cAAnB,UACE,cAAC,EAAD,CAAWF,OAAQA,EAAQC,UAAWA,IACtC,cAAC,EAAD,CAAWY,aAAcA,EAAcD,aAdxB,SAACP,GACLA,EAAEC,OAAOsC,aAAevC,EAAEC,OAAOuC,WAAaxC,EAAEC,OAAOwC,aAAe,KAfhE,WACrB,GAAGtB,GAAkBX,GACnB,GAAGA,EAAa6B,OAASlB,EAAekB,OAAQ,CAC9C,IAAIK,EAAalC,EAAamC,OAAO,YAAIxB,GAAgBS,OAAOpB,EAAa6B,OAAO,KACpFnB,EAAgBwB,SAEb,GAAG1B,GAAUR,GACfA,EAAa6B,OAASrB,EAAOqB,OAAQ,CACtC,IAAIK,EAAalC,EAAamC,OAAO,YAAI3B,GAAQY,OAAOpB,EAAa6B,OAAO,KAC5EnB,EAAgBwB,IAQlBE,aCnDSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8f4b43a6.chunk.js","sourcesContent":["import { IoSearch } from \"react-icons/io5\";\r\n\r\ninterface SearchBarProps {\r\n  search: string;\r\n  setSearch: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst SearchBar: React.FC<SearchBarProps> = ({ search, setSearch }) => {\r\n  return (\r\n    <div className=\"searchBar\">\r\n      <div className=\"searchBox\">\r\n        <IoSearch />\r\n        <input\r\n          value={search}\r\n          onChange={(e) => setSearch(e.target.value)}\r\n          className=\"searchField\"\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          name=\"search\"\r\n          placeholder=\"Search for an emoji using a keyword\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { Emoji } from \"../models/Emoji\";\r\n\r\ninterface EmojiListProps {\r\n    handleScroll: (e: any) => void;\r\n    emojisToShow: Emoji[] | undefined\r\n}\r\n\r\nconst EmojiList: React.FC<EmojiListProps> = ({ handleScroll, emojisToShow }) => {\r\n  return (\r\n    <section className=\"emojisSection\" onScroll={handleScroll}>\r\n    <div className=\"row\">\r\n    {emojisToShow && emojisToShow.map((emoji) => {\r\n          return (\r\n            <div title={emoji.title} key={emoji.title} className=\"col-4 col-md-3 col-lg-2 emoji\">\r\n              {emoji.symbol}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  </section>\r\n  );\r\n};\r\n\r\nexport default EmojiList;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Emoji } from \"./models/Emoji\";\nimport axios from \"axios\";\nimport SearchBar from \"./components/SearchBar\";\nimport EmojiList from \"./components/EmojiList\";\n\nfunction App() {\n  const [emojis, setEmojis] = useState<Emoji[]>();\n  const [emojisToShow, setEmojisToShow] = useState<Emoji[]>();\n  const [filteredEmojis, setFilteredEmojis] = useState<Emoji[]>()\n  const [search, setSearch] = useState(\"\")\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://raw.githubusercontent.com/SalesChamp/emoji-list/main/emoji-list.json`\n      )\n      .then((response) => {\n        setEmojis(response.data);\n      });\n  }, []);\n  \n  useEffect(() => {\n    if(filteredEmojis) {\n      let spliced = [...filteredEmojis].splice(0,50)\n      setEmojisToShow(spliced)\n    } else if(emojis) {\n      let spliced = [...emojis].splice(0,50)\n      setEmojisToShow(spliced)\n    }\n  }, [emojis, filteredEmojis])\n\n  useEffect(() => {\n    if(search) {\n      var filtered = emojis?.filter((emoji) => {\n        let keywords = emoji.keywords.split(\" \")\n        let match = keywords.find(element => element.includes(search))\n        return match && match.length > 0\n      })\n      setFilteredEmojis(filtered)\n    } else {\n      setFilteredEmojis(undefined)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [search])\n\n\n  const showMoreEmojis = () => {\n    if(filteredEmojis && emojisToShow) {\n      if(emojisToShow.length < filteredEmojis.length) {\n        let moreEmojis = emojisToShow.concat([...filteredEmojis].splice(emojisToShow.length,50))\n        setEmojisToShow(moreEmojis);\n      }\n    } else if(emojis && emojisToShow) {\n      if(emojisToShow.length < emojis.length) {\n        let moreEmojis = emojisToShow.concat([...emojis].splice(emojisToShow.length,50))\n        setEmojisToShow(moreEmojis);\n      }\n    }\n  }\n\n  const handleScroll = (e: any) => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop <= e.target.clientHeight + 100;\n    if(bottom) {\n      showMoreEmojis()\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"headerSection\">\n        <h2>Emoji Search</h2>\n      </header>\n      <section className=\"mainSection\">\n        <SearchBar search={search} setSearch={setSearch} />\n        <EmojiList emojisToShow={emojisToShow} handleScroll={handleScroll} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}